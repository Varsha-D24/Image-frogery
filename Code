import cv2
import hashlib

def calculate_md5(image):
    # Calculate the MD5 hash of the image data
    md5_hash = hashlib.md5(image.tobytes()).hexdigest()
    return md5_hash

def image_forgery_detection(image_path, block_size=16):
    # Load the image
    image = cv2.imread(image_path)

    # Convert the image to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Define the block size for splitting the image into regions
    height, width = gray.shape[:2]
    num_blocks_height = height // block_size
    num_blocks_width = width // block_size

    # Calculate MD5 hashes for each image region
    hashes = []
    for i in range(num_blocks_height):
        for j in range(num_blocks_width):
            # Extract a region from the grayscale image
            block = gray[i * block_size: (i+1) * block_size, j * block_size: (j+1) * block_size]

            # Calculate the MD5 hash of the region
            md5_hash = calculate_md5(block)

            # Store the hash value
            hashes.append(md5_hash)

    # Check for duplicate hash values indicating potential tampering
    duplicates = set([hash for hash in hashes if hashes.count(hash) > 1])

    if len(duplicates) > 0:
        print("Potential forgery detected!")
        print("Duplicate hash values:", duplicates)
    else:
        print("No potential forgery detected.")

# Call the image_forgery_detection function with the path to your image
image_forgery_detection("path/to/your/image.jpg")
